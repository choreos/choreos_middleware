NODE POOL MANAGER / SERVICE DEPLOYER – INSTALLATION GUIDE 
October, 02. 2012
Written by Leonardo Leite (USP)

== WHAT IS IT? ==


*Node Pool Manager* enables you to create virtual machines as nodes in a cloud infra-structure and retrieve nodes with specific configuration requirements by using a REST API. At the moment, Amazon Web Services (AWS EC2) and OpenStack are supported as cloud infra-structure.

*Service Deployer* enables you to easily deploy web services into cloud nodes. At the moment there are two deploy options supported: TOMCAT and COMMAN_DLINE services. TOMCAT services are WAR files intended to run in Tomcat. COMMAN_DLINE services are executed by runnable jar files that must contain the services themselves AND the main method to start the services.

== REQUIREMENTS ==

Before you run Node Pool Manager and Service Deployer, you will need:

#1 Java 6 (we are using OpenJDK)

#2 Maven 3  (http://maven.apache.org/download.html)

#3 An AWS account or an OpenStack identification

Node Pool Manager will use the AWS EC2 service or OpenStack infrastructure, which controls the management of virtual machines. You can create an AWS account at http://aws.amazon.com. Whereas using AWS EC2 is a paid services, using OpenStack requires you to deploy all the OpenStack infrastructure in your organization.

#4 An Chef account

Node Pool Manager and Service Deployer will properly configure the nodes using Chef, an open-source configuration management system. With Chef you can specify a resources set to be deployed into cloud nodes. These resources are described by a Ruby-like DSL (Domain Specific Language), and include: systems, files, scripts execution, and others.

You can setup your own Chef server, or create an Hosted Chef server account. Hosted Chef is offered by Opscode (http://www.opscode.com/). Although Hosted Chef frees you from setting the Chef Server in the infrastructure of your organization, it allows only a limited number of nodes to be managed by Chef.

== CONFIGURING IT ==

Open the folder ServiceDeployer/src/main/resources, and create a servicedeployer.properties file by copying the servicedeployer.properties.template file. The new properties file must be created in the same folder.

Open the just created properties file and edit it as follows:

NODE_POOL_MANAGER_PORT: the TCP port that will serve the Node Pool Manager
SERVICE_DEPLOYER_PORT: the TCP port that will serve the Service Deployer
NODE_SELECTOR:
CLOUD_PROVIDER:
FIXED_VM_IP: the IP of the virtual machine to test purposes; not necessary
FIXED_VM_HOSTNAME: the host name of the virtual machine to test purposes
FIXED_VM_PRIVATE_SSH_KEY: the location of the file with the private key to access the above virtual machine by SSH
FIXED_VM_USER: the user to log in the virtual machine to test purposes
AMAZON_ACCESS_KEY_ID: credentials of your AWS account
AMAZON_SECRET_KEY: credentials of your AWS account
AMAZON_KEY_PAIR: the name of the key pair generated on the AWS web console to access the nodes by SSH
AMAZON_PRIVATE_SSH_KEY: the location of the file with the private key corresponding to the above key pair
CHEF_CONFIG_FILE: your Chef configuration file location; usually the .chef/knife.rb within your chef repo.
CHEF_REPO: your Chef repo folder, where you store Chef recipes.

Example:
NODE_POOL_MANAGER_PORT=9100
SERVICE_DEPLOYER_PORT=9101
NODE_SELECTOR=ROUND_ROBIN
CLOUD_PROVIDER=AWS
FIXED_VM_IP=192.168.56.102
FIXED_VM_HOSTNAME=choreos-node
FIXED_VM_PRIVATE_SSH_KEY=/home/leonardo/.ssh/nopass
FIXED_VM_USER=choreos
AMAZON_ACCESS_KEY_ID=AKIAIIT213ISasdSECRETEFJH6Q
AMAZON_SECRET_KEY=N+KzHQITasdIS123ALSOwzAj9MiSECRETE0UPuwyD
AMAZON_KEY_PAIR=leofl
AMAZON_PRIVATE_SSH_KEY=/home/leonardo/.ssh/leofl.pem
CHEF_CONFIG_FILE=/home/leonardo/chef/chef-repo/.chef/knife.rb
CHEF_REPO=/home/leonardo/chef/chef-repo

Make sure your knife.rb file be something like:

log_level                :info 
log_location             STDOUT 
node_name                "lleite" 
client_key               "#{current_dir}/lleite.pem" 
validation_client_name   "choreos-verao-validator" 
validation_key           "#{current_dir}/choreos-verao-validator.pem" 
chef_server_url          "https://api.opscode.com/organizations/choreos-verao" 
cache_type               'BasicFile' 
cache_options( :path => "#{ENV['HOME']}/.chef/checksums" ) 
cookbook_path            ["#{current_dir}/../cookbooks"] 

Here, "lleite" is also my Opscode user name, and "choreos-verao" is the organization name configured on Hosted Chef. And don't forget the "cookbook_path" property.

You will also need to upload to your Chef Server all the cookbooks from our cookbook folder: https://github.com/choreos/choreos_middleware/tree/master/chef-repo/cookbooks.

== COMPILING IT ==

After installing Maven 3, open the terminal at the choreos_middleware folder, and run the build.sh script.

It can take several minutes.

== RUNNING IT ==

After compiling the project, to run both Node Pool Manager and Service Deployer you have just to run the main method on the org.ow2.choreos.servicedeployer.rest.Servers class.

You must run the system using Java 6.

This task can be easier accomplished if you import the ServiceDeployer project in the Eclipse IDE. 

After importing the project, open the menu Window>>Preferences>>Java>>Build Path>>Classpath variables, and set the M2_REPO variable pointing to your Maven repository folder, usually the .m2/repository folder within your home folder.

Obs: we have used the OpenJDK JVM and the Eclipse Indigo version.

If you successfully start the Node Pool Manager and the Service Deployer, you must see the following messages on the console:
Node Pool Manager has started [http://localhost:9100/nodepoolmanager/]
Service Deployer has started [http://localhost:9101/servicedeployer/]

== VERIFYING IF NODE POOL MANAGER WORKS ==

First go to your cookbook folder within your chef repo. Copy the “getting-started” folder and past it, creating a second folder called “getting-started2”. Open the file recipes/default.rb and change the line “template "#{ENV['HOME']}/chef-getting-started.txt" do” by “template "#{ENV['HOME']}/chef-getting-started2.txt" do”.

Upload this new cookbook to your chef server.

Start Node Pool Manager as earlier described.

Open Firefox and install the Poster plugin, which enables you to send HTTP requisitions. 

With Poster, send the following requisition:

HTTP method: POST
URI: http://localhost:9100/deploymentmanager/nodes/configs
Content-Type: application/xml
Body: <config><name>getting-started2</name></config>

Change the port number if necessary.

The response must take some time to be delivered. Take note the IP property of the node XML representation sent in the response body. You must use this IP to login with SSH in this VM, and verify if the home folder contains the getting-started2.txt file. If so, it worked!

Obs: if you have configure NODE_SELECTOR=ROUND_ROBIN, you must be sure there is some node already created on your cloud environment before post the request.

== VERIFYING IF SERVICE DEPLOYER WORKS ==

With Poster, the Firefox plugin, send the following request:

HTTP method: POST
URI: http://localhost:9100/deploymentmanager/services
Content-Type: application/xml
Body: 
<serviceSpec>
  <name>my_war</name> 
  <type>TOMCAT</type> 
  <codeUri>LINK</codeUri> 
</serviceSpec>

Change the port numbers if necessary. Replace "LINK" by an URL pointing to a WAR file. To learn how to build a WAR file containing a web service: http://ccsl.ime.usp.br/redmine/projects/bailevv/wiki/Jaxws_tomcat.

The application provided by the WAR file must be accessible by the address http://host:8080/WAR_FILE_NAME.
Such URL will be informed in the HTTP response body, and the host will be chosen by the Node Pool Manager.

If you prefer to deploy a JAR, requests the following:

HTTP method: POST
URI: http://localhost:9100/deploymentmanager/services
Content-Type: application/xml
Body: 
<serviceSpec> 
  <name>my_jar</name>
  <type>JAR</type> 
  <codeUri>LINK</codeUri> 
  <endpointName>endpointName</endpointName>
  <port>portNumber</port>
</serviceSpec>

The "endpointName" and "port" elements must be complaint with what the JAR code does. 
So, the service must be available at http://host:portNumber/endpointName.






