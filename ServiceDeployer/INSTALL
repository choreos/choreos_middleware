SERVICE DEPLOYER – INSTALLATION GUIDE
30/04/12
Written by Leonardo Leite (USP)


== WHAT IS IT? ==

Service Deployer enables you to easily deploy web services into cloud nodes.

At the moment there are two deploy options supported: WAR and JAR services.

WAR services are intended to run in Tomcat (or a complient container).

JAR services are executed by runnable jar files that must contain the services themselves AND the main method to start the services.

== REQUIREMETNS ==

Before you run Storage Factory, you will need Node Pool Manager running.

== CONFIGURING IT ==

As in Node Pool Manager, create the servicedeployer.properties file based on the  servicedeployer.properties.template file.

Fill it as the example, adapting when necessary:

SERVICE_DEPLOYER_PORT=9101
NODE_POOL_MANAGER=http://localhost:9100/nodepoolmanager
CHEF_SERVER_URL=http://aguia1.ime.usp.br:4000
CHEF_CONFIG_FILE=/home/leonardo/chef/chef-repo/.chef/knife.rb
CHEF_USER=leofl
CHEF_USER_KEY_FILE=/home/leonardo/chef/chef-repo/.chef/leofl.pem
CHEF_REPO=/home/leonardo/chef/chef-repo
VALIDATION_CLIENT_NAME=validation_aguia

You will need also to upload the "tomcat" and the "java" cookbooks to your chef repo. To download a cookbook in your workstation: "knife cookbook site install tomcat".


== COMPILING IT ==

Just open the terminal at the project folder, and type “mvn eclipse:eclipse”.

You need maven 3 in this step. It can take several minutes.


== RUNNING IT ==

After compiling the project, you have just to run the main method on the eu.choreos.servicedeployer.rest.ServiceDeployerStandaloneServer class.

You can proceed in the same way as indicated in the Node Pool Manager installation guide.

If you successfully start Service Deployer, you must see the “Starting Service Deployer...” message on the console.


== VERIFYING IF IT WORKS ==

With Poster, the firefox plugin, send the following requisition:

HTTP method: POST
URI: http://localhost:9101/servicedeployer/services
Content-Type: application/xml
Body: 
<serviceSpec> 
  <type>WAR</type> 
  <codeUri>LINK</codeUri> 
</serviceSpec>

Change the port numbers if necessary. Replace "LINK" by an URL pointing to a WAR file. To learn how to build a WAR file containing a web service: http://ccsl.ime.usp.br/redmine/projects/bailevv/wiki/Jaxws_tomcat.

The application provided by the WAR file must be accessible by the address http://host:8080/WAR_FILE_NAME.
Such URL will be informed in the HTTP response body, and the host will be chosen by the Node Pool Manager.

If you prefer to deploy a JAR, requests the following:

HTTP method: POST
URI: http://localhost:9101/servicedeployer/services
Content-Type: application/xml
Body: 
<serviceSpec> 
  <type>JAR</type> 
  <codeUri>LINK</codeUri> 
  <name>serviceName</name>
  <port>portNumber</port>
</serviceSpec>

The "name" and "port" elements must be complient with what the JAR code does. 
So, the service must be available at http://host:portNumber/serviceName.

