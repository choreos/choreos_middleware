rule "ResponseTime_Service_@{service_id}"
no-loop true
salience 20
dialect "mvel"

when
	$aEvent : GlimpseBaseEventChoreos(
		this.isConsumed == false,
		this.getServiceSource == "@{service_id}",
		this.getChoreographySource == "@{chor_id}",
		this.isException == false,
		this.getEventName == "response_time"
	);
then
	$aEvent.setConsumed(true);
	update($aEvent);
	float meas = Float.parseFloat((String) $aEvent.getEventData());
	insert (new ResponseTimeEvent(meas,
		(String) $aEvent.getMachineIP(),
		(String) $aEvent.getServiceSource(),
		(String) $aEvent.getChoreographySource())
	);
	retract ($aEvent);
end

rule "CpuUser"
no-loop true
salience 20
dialect "mvel"

when
	$aEvent : GlimpseBaseEventChoreos(
		this.isConsumed == false,
		this.isException == false,
		this.getEventName == "cpu_user"
	);
then
	$aEvent.setConsumed(true);
	update($aEvent);
	Pattern p = Pattern.compile("Measured: ([0-9.]+)");
	Matcher m1 = p.matcher((String) $aEvent.getEventData());
	float f = -1;
	if (m1.find())
		f = Float.parseFloat(m1.group(0).split(": ")[1]);
	insert (new CpuUserEvent(f,$aEvent.getMachineIP()));
	ResponseDispatcher.LogViolation(
		drools.getRule().getName(),
		"\nResource Metric Aggregator",
		"\nSLA resource measurement: " + (String) $aEvent.getMachineIP() + " " + f);
end

rule "HighResponseTime_Service_@{service_id}"
no-loop true
salience 30
dialect "mvel"

when
	$ev : ResponseTimeEvent(service == "@{service_id}", chor == "@{chor_id}");
	Number( $eventSum : doubleValue ) from accumulate(
		$event : ResponseTimeEvent($ev.service == service, $ev.chor == chor, $ev.ip == ip),
			count($event)
	);
	Number( intValue > $eventSum * @{acceptable_precentage} ) from accumulate(
		$sEvent : ResponseTimeEvent(value > @{max_response_time}, $ev.service == service, $ev.chor == chor, $ev.ip == ip),
			count($sEvent)
	);
	Number( doubleValue > @{max_cpu_usage} )
		from accumulate( CpuUserEvent($ev.ip == ip, $val : value),
			average($val)
	);
	not AddReplica(service == $ev.service);
then
	insert(new AddReplica($ev.service));
	ResponseDispatcher.LogViolation(drools.getRule().getName(),
		"QoS Drools Rules",
		"\nSLA QoS violation detected on: " + $ev.service);
	ResponseDispatcher.NotifyMeValue(drools.getRule().getName(),
		"eeConsumer", (String) $ev.ip, (String) $ev.service);
end

rule "LowCpuUser"
no-loop true
salience 20
dialect "mvel"

when
	$ev : CpuUserEvent();
	$rs : Number(@{min_cpu_usage} > doubleValue) from accumulate(
		CpuUserEvent($ev.ip == ip, $val : value),
			average($val)
	);
	not RemReplica(ip == $ev.ip);
then
	insert(new RemReplica($ev.ip));
	ResponseDispatcher.LogViolation(drools.getRule().getName(),
		"QoS Drools Rules",
		"\nSLA QoS violation detected on: " + $ev.ip);
	ResponseDispatcher.NotifyMeValue(drools.getRule().getName(),
		"eeConsumer", (String) $ev.ip, "all");
end
