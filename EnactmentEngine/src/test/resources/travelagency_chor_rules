<?xml version="1.0" encoding="UTF-8"?>
<ComplexEventRuleActionList xmlns="http://labse.isti.cnr.it/glimpse/xml/ComplexEventRule"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://labse.isti.cnr.it/glimpse/xml/ComplexEventRule ./ComplexEventRule.xsd">


<Insert RuleType="drools">

<RuleName>Choreography_1</RuleName>
<RuleBody>
import it.cnr.isti.labsedc.glimpse.event.GlimpseBaseEventChoreos;
import it.cnr.isti.labsedc.glimpse.manager.ResponseDispatcher;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

declare GlimpseBaseEventChoreos
	@role( event )
	@timestamp( timeStamp )
end

declare ResponseTimeEvent
	@role(event)
	@expires (2m)
	value : float
	ip : String
	service: String
	chor: String
end

declare CpuUserEvent
	@role(event)
	@expires (5m)
	value : float
	ip : String
end

declare AddReplica
	@role(event)
	@expires( 10m )
	service : String
end

declare RemReplica
	@role(event)
	@expires ( 6m )
	ip : String
end

rule "ResponseTime_Service_travelagency1"
no-loop true
salience 20
dialect "mvel"

when
	$aEvent : GlimpseBaseEventChoreos(
		this.isConsumed == false,
		this.getServiceSource == "travelagency1",
		this.getChoreographySource == "1",
		this.isException == false,
		this.getEventName == "response_time"
	);
then
	$aEvent.setConsumed(true);
	update($aEvent);
	float meas = Float.parseFloat((String) $aEvent.getEventData());
	insert (new ResponseTimeEvent(meas,
		(String) $aEvent.getMachineIP(),
		(String) $aEvent.getServiceSource(),
		(String) $aEvent.getChoreographySource())
	);
	ResponseDispatcher.LogViolation(
		drools.getRule().getName(),
		"Resource Metric Aggregator",
		"SLA resource measurement: " + (String) $aEvent.getServiceSource());
	retract ($aEvent);
end

rule "CpuUser"
no-loop true
salience 20
dialect "mvel"

when
	$aEvent : GlimpseBaseEventChoreos(
		this.isConsumed == false,
		this.isException == false,
		this.getEventName == "cpu_user"
	);
then
	$aEvent.setConsumed(true);
	update($aEvent);
	Pattern p = Pattern.compile("Measured: ([0-9.]+)");
	Matcher m1 = p.matcher((String) $aEvent.getEventData());
	float f = -1;
	if (m1.find())
		f = Float.parseFloat(m1.group(0).split(": ")[1]);
	insert (new CpuUserEvent(f,$aEvent.getMachineIP()));
	ResponseDispatcher.LogViolation(
		drools.getRule().getName(),
		"\nResource Metric Aggregator",
		"\nSLA resource measurement: " + (String) $aEvent.getMachineIP() + " " + f);
end

rule "HighResponseTime_Service_travelagency1"
no-loop true
salience 30
dialect "mvel"

when
	$ev : ResponseTimeEvent(service == "travelagency1", chor == "1");
	Number( $eventSum : doubleValue ) from accumulate(
		$event : ResponseTimeEvent($ev.service == service, $ev.chor == chor, $ev.ip == ip),
			count($event)
	);
	Number( intValue > $eventSum * 0.05 ) from accumulate(
		$sEvent : ResponseTimeEvent(value > 120.0, $ev.service == service, $ev.chor == chor, $ev.ip == ip),
			count($sEvent)
	);
	Number( doubleValue > 90.0 )
		from accumulate( CpuUserEvent($ev.ip == ip, $val : value),
			average($val)
	);
	not AddReplica(service == $ev.service);
then
	insert(new AddReplica($ev.service));
	ResponseDispatcher.LogViolation(drools.getRule().getName(),
		"QoS Drools Rules",
		"\nSLA QoS violation detected on: " + $ev.service);
	ResponseDispatcher.NotifyMeValue(drools.getRule().getName(),
		"eeConsumer", (String) $ev.ip, (String) $ev.service);
end

rule "LowCpuUser"
no-loop true
salience 20
dialect "mvel"

when
	$ev : CpuUserEvent();
	$rs : Number(30.0 > doubleValue) from accumulate(
		CpuUserEvent($ev.ip == ip, $val : value),
			average($val)
	);
	not RemReplica(ip == $ev.ip);
then
	insert(new RemReplica($ev.ip));
	ResponseDispatcher.LogViolation(drools.getRule().getName(),
		"QoS Drools Rules",
		"\nSLA QoS violation detected on: " + $ev.ip);
	ResponseDispatcher.NotifyMeValue(drools.getRule().getName(),
		"eeConsumer", (String) $ev.ip, "all");
end


rule "ResponseTime_Service_airline0"
no-loop true
salience 20
dialect "mvel"

when
	$aEvent : GlimpseBaseEventChoreos(
		this.isConsumed == false,
		this.getServiceSource == "airline0",
		this.getChoreographySource == "1",
		this.isException == false,
		this.getEventName == "response_time"
	);
then
	$aEvent.setConsumed(true);
	update($aEvent);
	float meas = Float.parseFloat((String) $aEvent.getEventData());
	insert (new ResponseTimeEvent(meas,
		(String) $aEvent.getMachineIP(),
		(String) $aEvent.getServiceSource(),
		(String) $aEvent.getChoreographySource())
	);
	ResponseDispatcher.LogViolation(
		drools.getRule().getName(),
		"Resource Metric Aggregator",
		"SLA resource measurement: " + (String) $aEvent.getServiceSource());
	retract ($aEvent);
end

rule "CpuUser"
no-loop true
salience 20
dialect "mvel"

when
	$aEvent : GlimpseBaseEventChoreos(
		this.isConsumed == false,
		this.isException == false,
		this.getEventName == "cpu_user"
	);
then
	$aEvent.setConsumed(true);
	update($aEvent);
	Pattern p = Pattern.compile("Measured: ([0-9.]+)");
	Matcher m1 = p.matcher((String) $aEvent.getEventData());
	float f = -1;
	if (m1.find())
		f = Float.parseFloat(m1.group(0).split(": ")[1]);
	insert (new CpuUserEvent(f,$aEvent.getMachineIP()));
	ResponseDispatcher.LogViolation(
		drools.getRule().getName(),
		"\nResource Metric Aggregator",
		"\nSLA resource measurement: " + (String) $aEvent.getMachineIP() + " " + f);
end

rule "HighResponseTime_Service_airline0"
no-loop true
salience 30
dialect "mvel"

when
	$ev : ResponseTimeEvent(service == "airline0", chor == "1");
	Number( $eventSum : doubleValue ) from accumulate(
		$event : ResponseTimeEvent($ev.service == service, $ev.chor == chor, $ev.ip == ip),
			count($event)
	);
	Number( intValue > $eventSum * 0.05 ) from accumulate(
		$sEvent : ResponseTimeEvent(value > 120.0, $ev.service == service, $ev.chor == chor, $ev.ip == ip),
			count($sEvent)
	);
	Number( doubleValue > 90.0 )
		from accumulate( CpuUserEvent($ev.ip == ip, $val : value),
			average($val)
	);
	not AddReplica(service == $ev.service);
then
	insert(new AddReplica($ev.service));
	ResponseDispatcher.LogViolation(drools.getRule().getName(),
		"QoS Drools Rules",
		"\nSLA QoS violation detected on: " + $ev.service);
	ResponseDispatcher.NotifyMeValue(drools.getRule().getName(),
		"eeConsumer", (String) $ev.ip, (String) $ev.service);
end

rule "LowCpuUser"
no-loop true
salience 20
dialect "mvel"

when
	$ev : CpuUserEvent();
	$rs : Number(30.0 > doubleValue) from accumulate(
		CpuUserEvent($ev.ip == ip, $val : value),
			average($val)
	);
	not RemReplica(ip == $ev.ip);
then
	insert(new RemReplica($ev.ip));
	ResponseDispatcher.LogViolation(drools.getRule().getName(),
		"QoS Drools Rules",
		"\nSLA QoS violation detected on: " + $ev.ip);
	ResponseDispatcher.NotifyMeValue(drools.getRule().getName(),
		"eeConsumer", (String) $ev.ip, "all");
end




</RuleBody>


</Insert>

</ComplexEventRuleActionList>
